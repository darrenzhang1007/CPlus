// 指针与引用
#include <iostream>
#include <string>

using namespace std;

int main()
{
    // 指针
    int a = 10;
    cout << "a的地址为: " << &a << endl;
    int *p = &a;                                 // 指向整型的指针p，在等号右边的&为取地址符
    cout << "p指针指向的内容为: " << *p << endl; // 解引用 -> *指针名：取值
    cout << "p的值为: " << p << endl;
    cout << "p的值为: " << &p << endl; // p的地址

    // 空指针
    int *q;
    cout << "q指向的内容是: " << *q << endl; // *q中的值也是之前该q位置存储的值
    cout << "q指向的内容是: " << q << endl;  // q的值（地址）是随机的

    // int *q1 = nullptr; // 空指针不指向任何对象，不能对其取值操作，会报错
    // cout << *q1 << endl;
    // cout << q1 << endl; // 0

    // 使用指针的优点和必要性
    // 1. 指针能够有效的表示数据结构，如链表
    // 2. 能动态分配内存，实现内存的自由管理
    // 3. 便捷高效地使用数组，如C风格字符串使用
    // 4. 指针传参，值传递不如地址传递高效，因为值传递是要先从实参的地址中取出值
    //再赋值给形参(拷贝）代入函数使用；而指针则把形参的地址直接指向实参的地址，使用时直接取出数据，效率更高

    // 引用，变量的别名，语法：数据类型& 引用名称 = 变量名
    int b = 10;
    int &ref = b; // 引用变量必须绑定初始值，
    // int& reg1; // 创建引用时必须进行初始化操作
    cout << "ref: " << ref << endl; // 10
    ref++;                          // 对引用的操作就是对变量本身操作
    cout << "ref: " << ref << endl; // 11
    cout << "b: " << b << endl;     // 11
    // 常用操作：函数中的引用传参，可以在函数中修改变量的值，通过该参数，将结果回传

    return 0;
}
// 位运算符与类型转换
#include <string>
#include <iostream>

using namespace std;

int main()
{
    // 1. 位运算符（针对整数）
    // &（按位与） |（按位或） ^（按位异或）~（按位非/取反）
    // 整数的2进制表示
    int a = 13; // 8+4+1 -> 1101
    int b = 6;  // 4+2 -> 0110

    cout << "按位与的结果为 " << (a & b) << endl;   // 0100
    cout << "按位或的结果为 " << (a | b) << endl;   // 1111
    cout << "按位异或的结果为 " << (a ^ b) << endl; // 1011 -> 按位异或: 相同为0,不同为1
    cout << "按位取反的结果为 " << (~a) << endl;    // 0010
    cout << "按位取反的结果为 " << (~b) << endl;    // 1001

    // 原码 补码:对于整数来说,原码和补码相同,对于负数来说,原码取反再加1
    // 数字在计算机中以补码的形式存在
    // 13 -> 00001101 -> 00001101
    // 取反: 00001101 -> 11110010
    // 计算机存储的是补码(11110010),然后需要求原码(减1 取反,最高位不取反): 1111 0010 - 1 -> 11110001 -> 1000 1110 -> -14
    // 6 -> 0000 0110 -> 0000 0110
    // 取反: 0000 0110 -> 1111 1001
    // 1111 1001 -1 -> 1111 1000 -> 1000 0111 -> -7

    // 移位运算符  运算符重载
    // << 左移-> *2
    // >> 右移 -> /2

    cout << "a 左移动两位" << (a << 2) << endl; // 0000 1101 -> 0011 0100 -> 52
    cout << "b 右移动两位" << (b >> 2) << endl; // 0000 0110 -> 0000 0001 -> 1

    // 2. 类型转换(显示 or 隐式)
    int c = 3.14; // implicit conversion from float to int, 损失精度
    cout << "c is " << c << endl;
    // short -> int
    // bool -> 0 1(非0)

    // 显示类型转换 static_cast const_cast
    return 0;
}
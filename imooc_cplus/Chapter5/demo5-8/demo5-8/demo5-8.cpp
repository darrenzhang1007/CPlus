// demo5-8.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <string>
#include <iostream>
#include <memory>
using namespace std;

int main() {
	{// 确定auto_ptr失效的范围，出了大括号，就失效了
		// 对int使用
		auto_ptr<int> pI(new int(10)); // 泛型编程
		cout << *pI << endl;           // 10 

		// auto_ptr	C++ 17中移除 拥有严格对象所有权语义的智能指针
		// auto_ptr原理：在拷贝 / 赋值过程中，直接剥夺原对象对内存的控制权，转交给新对象，
		// 然后再将原对象指针置为nullptr（早期：NULL）。这种做法也叫管理权转移。
		// 他的缺点不言而喻，当我们再次去访问原对象时，程序就会报错，所以auto_ptr可以说实现的不好，
		// 很多企业在其库内也是要求不准使用auto_ptr。
		auto_ptr<string> languages[5] = {
			auto_ptr<string>(new string("C")),
			auto_ptr<string>(new string("Java")),
			auto_ptr<string>(new string("C++")),
			auto_ptr<string>(new string("Python")),
			auto_ptr<string>(new string("Rust"))
		};
		cout << "There are some computer languages here first time: \n";
		for (int i = 0; i < 5; ++i)
		{
			cout << *languages[i] << endl;
		}
		auto_ptr<string> pC;
		pC = languages[2]; // languges[2] loses ownership. 将所有权从languges[2]转让给pC，
						   // 此时languges[2]不再引用该字符串从而变成空指针
		cout << "There are some computer languages here second time: \n";
		for (int i = 0; i < 2; ++i)
		{
			cout << *languages[i] << endl;
		}
		cout << "The winner is " << *pC << endl; // 将C++复制给了pC
		cout << "There are some computer languages here third time: \n";
		for (int i = 0; i < 5; ++i) {
			cout << *languages[i] << endl;
		}
		
	}
	return 0;
}